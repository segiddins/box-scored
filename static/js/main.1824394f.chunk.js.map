{"version":3,"sources":["Components.tsx","positions.ts","parsePlay.ts","parseGame.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Alert","variant","dismissible","closeLabel","LeftIcon","SpeakerphoneIcon","action","children","React","show","setShow","className","info","warning","error","aria-hidden","type","onClick","Card","Table","data","columns","ifEmpty","undefined","row","classNames","rest","length","builders","Array","isArray","map","cb","idx","header","elt","builder","POSITIONS","fielder","bnb","s","desc","node","or","skip","base","next","and","wrap","repeat","fielders","out","hit","hbp","np","stolenBase","doubleSteal","sepBy","baserunning","optionalBaserunningAddOn","strikeout","intentionalWalk","walk","fieldersChoice","interference","doubleplay","foulFlyError","basicPlay","hitLocation","f","a","value","v","fieldLocation","towardTheLine","severity","depth","foul","join","filter","modifier","modifiers","advancement","play","parsePlay","playString","ret","parse","source","playIsScoring","advancements","name","includes","find","Team","last","arg0","slice","pop","Statline","positions","atBats","plateAppearances","hitByPitches","singles","doubles","triples","homeruns","hits","walks","strikeouts","stat","count","this","Error","Stats","stats","app","key","JSON","stringify","pos","statline","push","Object","values","isHome","opponent","t","home","away","changedState","state","changes","newState","copy","bases","score","players","errors","gdp","inning","battingTeam","outs","pitching","batting","onDeck","inTheHole","nextUp","slotsAway","p","team","slot","makeInitialState","game","starters","slots","x","reduceState","batterID","playerID","batterStats","advanceBatter","times","record","console","log","fielderOrError","fromIdx","Number","advance","from","to","fromPlayer","toIdx","year","fetch","method","response","text","body","logs","games","lines","CSV","batHand","batHandBatter","line","currentGame","id","version","events","comments","origLine","tok","shift","k","appearanceNumber","findIndex","old","substitutions","replace","pitches","parsedPlay","precedingState","batterHand","lastPlay","pl","MetadataContext","createContext","parks","Map","people","GameInfo","useContext","transformer","site","get","classnames","entries","BoxScore","teams","apps","all","sort","b","comp","PlayNode","mod","hitLoc","assist","flatMap","br","m","n","n1","f1","f2","sb","notAnOut","PlayC","location","column","expected","e","PlayByPlay","event","runner","c","GameC","href","target","visteam","hometeam","date","number","style","gridTemplateColumns","LogsC","Body","useState","setLogs","setParks","setPeople","search","useLocation","useEffect","query","QueryString","str","getLogs","then","rel","Provider","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1824394f.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { SpeakerphoneIcon, XIcon } from \"@heroicons/react/outline\";\nimport classNames from \"classnames\";\n\nexport type AlertProps = {\n  //   variant?: Variant;\n  variant: \"info\" | \"warning\" | \"error\";\n  LeftIcon?: React.FC<React.ComponentProps<\"svg\">>;\n  dismissible?: boolean;\n  closeLabel?: string;\n  //   transition?: TransitionType;\n  action?: React.ReactNode;\n  children?: React.ReactNode;\n};\nexport const Alert = ({\n  variant,\n  dismissible = true,\n  closeLabel = \"Dismiss\",\n  LeftIcon = SpeakerphoneIcon,\n  action = null,\n  children,\n}: AlertProps) => {\n  const [show, setShow] = React.useState(true);\n  if (!show) return null;\n\n  const colorClassNames = {\n    info: \"bg-indigo-400\",\n    warning: \"bg-yellow-500\",\n    error: \"bg-red-400\",\n  };\n  const iconBGClassNames = {\n    info: \"bg-indigo-700\",\n    warning: \"bg-yellow-800\",\n    error: \"bg-red-700\",\n  };\n  const buttonTextClassNames = {\n    info: \"text-indigo-500\",\n    warning: \"text-yellow-600\",\n    error: \"text-red-500\",\n  };\n\n  return (\n    <div className={`${colorClassNames[variant]} mb-3`}>\n      <div className=\"mx-auto py-3 px-3 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between flex-wrap\">\n          <div className=\"w-0 flex-1 flex items-center\">\n            {LeftIcon && (\n              <span\n                className={`flex p-2 rounded-lg ${iconBGClassNames[variant]}`}\n              >\n                <LeftIcon className=\"h-6 w-6 text-white\" aria-hidden=\"true\" />\n              </span>\n            )}\n            <p className=\"ml-3 font-medium text-white truncate\">{children}</p>\n          </div>\n          {action && (\n            <div className=\"order-3 mt-2 flex-shrink-0 w-full sm:order-2 sm:mt-0 sm:w-auto\">\n              <span\n                className={`flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium ${buttonTextClassNames[variant]} bg-white hover:bg-indigo-50`}\n              >\n                {action}\n              </span>\n            </div>\n          )}\n          {dismissible && (\n            <div className=\"order-2 flex-shrink-0 sm:order-3 sm:ml-3\">\n              <button\n                type=\"button\"\n                className=\"-mr-1 flex p-2 rounded-md hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-white sm:-mr-2\"\n                onClick={() => setShow(false)}\n              >\n                <span className=\"sr-only\">{closeLabel}</span>\n                <XIcon className=\"h-6 w-6 text-white\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype CardProps = { children: React.ReactNode };\nconst CardI = ({ children }: CardProps) => {\n  return (\n    <div className=\"shadow-md rounded-md p-2 border-gray-400 border-opacity-70 border-solid border\">\n      <div className=\"p-2\">{children}</div>\n    </div>\n  );\n};\nconst CardTitle = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <h3 className=\"text-lg leading-6 font-semibold text-gray-900 text-center\">\n      {children}\n    </h3>\n  );\n};\nconst CardBody = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"bg-white px-2 py-1\">\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-1 mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\nconst CardText = ({ children }: { children: React.ReactNode }) => {\n  return <div className=\"mt-2 text-sm text-gray-500\">{children}</div>;\n};\nconst CardActions = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <div className=\"sm:flex sm:flex-wrap sm:items-center sm:justify-items-center justify-center\">\n      {children}\n    </div>\n  );\n};\nconst CardAction = ({\n  children,\n  onClick,\n}: {\n  children: React.ReactNode;\n  onClick?: React.ButtonHTMLAttributes<unknown>[\"onClick\"];\n}) => {\n  return (\n    <button\n      className=\"bg-purple-500 text-white active:bg-purple-600 font-bold uppercase text-xs px-4 py-2 rounded shadow-sm hover:shadow-md outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n      type=\"button\"\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport const Card = {\n  Card: CardI,\n  Title: CardTitle,\n  Body: CardBody,\n  Text: CardText,\n  Actions: CardActions,\n  Action: CardAction,\n};\n\ntype OneOrArray<T> = T | T[];\ntype ColumnBuilderProps<T> = {\n  header?: React.ReactNode;\n  children: (arg0: T) => React.ReactNode;\n};\nconst ColumnBuilder = <T extends unknown>({\n  header,\n  children,\n}: ColumnBuilderProps<T>) => {\n  return { header, builder: children };\n};\n// class ColumnBuilder<T> extends React.Component<ColumnBuilderProps<T>> {\n//   // Renderless component.\n//   render() {\n//     return this.props;\n//   }\n// }\n\ntype TableProps<T> = {\n  data: T[];\n  columns: OneOrArray<{\n    header: React.ReactNode;\n    builder: (arg0: T) => React.ReactNode;\n  }>;\n  row?: (arg0: T) => Omit<React.HTMLProps<HTMLTableRowElement>, \"children\">;\n  ifEmpty?: React.ReactNode;\n} & Omit<\n  React.DetailedHTMLProps<\n    React.TableHTMLAttributes<HTMLTableElement>,\n    HTMLTableElement\n  >,\n  \"children\"\n>;\n\nconst TableI = <T extends unknown>({\n  data,\n  columns,\n  ifEmpty = undefined,\n  row = () => {\n    return {\n      className: classNames(\n        \"table-row\",\n        \"border-b\",\n        \"border-gray-300\",\n        \"align-text-top\"\n      ),\n    };\n  },\n  ...rest\n}: TableProps<T>) => {\n  if (data.length === 0 && ifEmpty) {\n    return <>{ifEmpty}</>;\n  }\n\n  const builders = Array.isArray(columns) ? columns : [columns];\n\n  return (\n    <table className={classNames(\"table\", \"border-collapse\")} {...rest}>\n      <thead className={classNames(\"table-header-group\")}>\n        {builders.map((cb, idx) => (\n          <th key={idx}>{cb.header}</th>\n        ))}\n      </thead>\n      <tbody className={classNames(\"table-row-group\")}>\n        {data.map((elt, idx) => (\n          <tr key={idx} {...row(elt)}>\n            {builders.map((builder, idx) => (\n              <td key={idx}>{builder.builder(elt)}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport const Table = {\n  Table: TableI,\n  Column: ColumnBuilder,\n};\n","export const POSITIONS: Record<string, string> = {\n  \"1\": \"P\",\n  \"2\": \"C\",\n  \"3\": \"1B\",\n  \"4\": \"2B\",\n  \"5\": \"3B\",\n  \"6\": \"SS\",\n  \"7\": \"LF\",\n  \"8\": \"CF\",\n  \"9\": \"RF\",\n  \"10\": \"DH\",\n  \"11\": \"PH\",\n  \"12\": \"PR\",\n};\n","import { POSITIONS } from \"./positions\";\nimport * as bnb from \"bread-n-butter\";\n\nconst fielder = bnb\n  .match(/[1-9]/)\n  .map((s) => POSITIONS[s])\n  .desc([\"position\"])\n  .node(\"Fielder\");\nexport type Fielder = ReturnType<typeof fielder[\"tryParse\"]>;\n\nconst error = bnb\n  .all(\n    fielder.or(bnb.ok(null)).skip(bnb.text(\"E\")),\n    fielder,\n    bnb\n      .text(\"/TH\")\n      .map(() => \"TH\" as \"TH\")\n      .node(\"throwing\")\n      .or(bnb.ok(null))\n  )\n  .node(\"Error\");\n\nconst base = bnb\n  .choice(\n    bnb.text(\"1\").next(bnb.ok(\"1B\" as \"1B\")),\n    bnb.text(\"2\").next(bnb.ok(\"2B\" as \"2B\")),\n    bnb.text(\"3\").next(bnb.ok(\"3B\" as \"3B\")),\n    bnb\n      .text(\"H\")\n      .next(bnb.ok(\"Home\" as \"Home\"))\n      .and(\n        bnb\n          .choice(\n            // TODO: capture these params\n            error,\n            bnb.text(\"TUR\").node(\"Team Unearned Run\"),\n            bnb.text(\"UR\").node(\"Unearned Run\"),\n            bnb.text(\"RBI\").node(\"RBI credited\"),\n            bnb.text(\"NR\").or(bnb.text(\"NORBI\")).node(\"No RBI credited\")\n          )\n          .wrap(bnb.text(\"(\"), bnb.text(\")\"))\n          .repeat(0)\n      ),\n    bnb.text(\"B\").next(bnb.ok(\"Home\" as \"Home\"))\n  )\n  .desc([\"base\"])\n  .node(\"Base\");\nexport type Base = ReturnType<typeof base[\"tryParse\"]>;\n\nconst fielders = fielder.repeat(1).desc([\"fielders\"]).node(\"Fielders\");\nexport type Fielders = ReturnType<typeof fielders[\"tryParse\"]>;\n\nconst out = fielders\n  .and(base.wrap(bnb.text(\"(\"), bnb.text(\")\")).or(bnb.ok(null)))\n  .node(\"Out\");\nconst hit = bnb\n  .choice(\n    bnb.text(\"S\").next(fielders).node(\"Single\"),\n    bnb.text(\"D\").next(fielders).node(\"Double\"),\n    bnb.text(\"T\").next(fielders).node(\"Triple\"),\n    bnb\n      .text(\"HR\")\n      .or(bnb.text(\"H\"))\n      .next(fielders)\n      .node(\"Inside The Park Home Run\"),\n    bnb.text(\"HR\").or(bnb.text(\"H\")).node(\"Home Run\"),\n    bnb.text(\"DGR\").node(\"Ground Rule Double\")\n  )\n  .node(\"Hit\");\nexport type Hit = ReturnType<typeof hit[\"tryParse\"]>;\n\nconst hbp = bnb.text(\"HP\").node(\"Hit By Pitch\");\nconst np = bnb.text(\"NP\").node(\"No Play\");\n\nconst stolenBase = bnb.text(\"SB\").next(base).node(\"Stolen Base\");\nconst doubleSteal = stolenBase.sepBy(bnb.text(\";\"), 2).node(\"Double Steal\");\n\nconst baserunning = bnb.choice(\n  bnb.text(\"BK\").node(\"Balk\"),\n  bnb\n    .text(\"CS\")\n    .next(bnb.all(base, fielders.wrap(bnb.text(\"(\"), bnb.text(\")\"))))\n    .node(\"Caught Stealing\"),\n  bnb\n    .all(\n      bnb.text(\"PO\").next(base),\n      error.or(fielders).wrap(bnb.text(\"(\"), bnb.text(\")\"))\n    )\n    .node(\"Pick Off\"),\n  doubleSteal,\n  stolenBase,\n  bnb.text(\"PB\").node(\"Passed Ball\"),\n  bnb.text(\"DI\").node(\"Defensive Indifference\"),\n  bnb.text(\"WP\").node(\"Wild Pitch\")\n);\n\nconst optionalBaserunningAddOn = bnb.text(\"+\").next(baserunning).repeat();\n\nconst strikeout = bnb\n  .text(\"K\")\n  .next(optionalBaserunningAddOn)\n  .node(\"Strikeout\");\nconst intentionalWalk = bnb\n  .match(/IW?/)\n  .next(optionalBaserunningAddOn)\n  .node(\"Intentional Walk\");\nconst walk = bnb.text(\"W\").next(optionalBaserunningAddOn).node(\"Walk\");\n\nconst fieldersChoice = bnb\n  .text(\"FC\")\n  .next(fielders.or(bnb.ok(null)))\n  .node(\"Fielders Choice\");\n\nconst interference = bnb\n  .text(\"C/\")\n  .next(bnb.text(\"E\").next(fielder).node(\"Interference\"));\n\nconst doubleplay = bnb\n  .all(fielders, base.wrap(bnb.text(\"(\"), bnb.text(\")\")), fielders)\n  .node(\"Double Play\");\n\nconst foulFlyError = bnb\n  .text(\"FLE\")\n  .next(fielder)\n  .node(\"Error on foul fly ball\");\n\nconst basicPlay = bnb\n  .choice(\n    foulFlyError,\n    np,\n    baserunning,\n    fieldersChoice,\n    error,\n    doubleplay,\n    out,\n    walk,\n    hbp,\n    hit,\n    strikeout,\n    intentionalWalk,\n    interference\n  )\n  .node(\"Basic Play\");\nexport type BasicPlay = ReturnType<typeof basicPlay[\"tryParse\"]>;\n\nconst hitLocation = bnb\n  .all(\n    fielder\n      .or(bnb.text(\"0\").node(\"Unknown location\"))\n      .repeat(1, 2)\n      .map((f) => f.map((a) => a.value))\n      .or(bnb.choice(bnb.text(\"+\"), bnb.text(\"-\")).map(() => null)),\n    bnb\n      .text(\"L\")\n      .or(bnb.ok(null))\n      .map((v) => !!!v),\n    bnb\n      .text(\"M\")\n      .map(() => \"medium\")\n      .or(bnb.text(\"X\").map(() => \"extra\"))\n      .or(bnb.ok(null)),\n    bnb\n      .text(\"D\")\n      .map(() => \"deep\")\n      .or(bnb.text(\"S\").map(() => \"shallow\"))\n      .or(bnb.ok(null)),\n    bnb\n      .text(\"F\")\n      .map(() => \"Foul\")\n      .or(bnb.ok(null)),\n    bnb.text(\"+\").or(bnb.text(\"-\")).or(bnb.ok(null))\n  )\n  .map(([fieldLocation, towardTheLine, severity, depth, foul]) => {\n    return {\n      fieldLocation: fieldLocation?.join(\"-\"),\n      towardTheLine,\n      severity,\n      depth,\n      foul,\n      desc: [severity, depth, fieldLocation?.join(\"-\"), foul && \"(foul)\"]\n        .filter((s) => s)\n        .join(\" \"),\n    };\n  })\n  .node(\"Hit Location\");\n\nconst modifier = bnb\n  .choice(\n    bnb.text(\"AP\").node(\"Appeal Play\"),\n    bnb.text(\"BGDP\").node(\"bunt grounded into double play\"),\n    bnb.text(\"BG\").node(\"ground ball bunt\"),\n    bnb.text(\"BINT\").node(\"batter interference\"),\n    bnb.text(\"BL\").node(\"line drive bunt\"),\n    bnb.text(\"BOOT\").node(\"batting out of turn\"),\n    bnb.text(\"BPDP\").node(\"bunt popped into double play\"),\n    bnb.text(\"BP\").node(\"bunt pop up\"),\n    bnb.text(\"BR\").node(\"runner hit by batted ball\"),\n    bnb.text(\"COUB\").node(\"courtesy batter\"),\n    bnb.text(\"COUF\").node(\"courtesy fielder\"),\n    bnb.text(\"COUR\").node(\"courtesy runner\"),\n    bnb.text(\"C\").node(\"called third strike\"),\n    bnb.text(\"DP\").node(\"Double play\"),\n    bnb.text(\"E\").next(fielder).node(\"error\"),\n    bnb.text(\"FDP\").node(\"fly ball double play\"),\n    bnb.text(\"FINT\").node(\"fan interference\"),\n    bnb.text(\"FL\").node(\"foul\"),\n    bnb.text(\"FO\").node(\"force out\"),\n    bnb.text(\"F\").node(\"fly\"),\n    bnb.text(\"GDP\").node(\"ground ball double play\"),\n    bnb.text(\"GTP\").node(\"ground ball triple play\"),\n    bnb.text(\"G\").node(\"ground ball\"),\n    bnb.text(\"IF\").node(\"infield fly rule\"),\n    bnb.text(\"INT\").node(\"interference\"),\n    bnb.text(\"IPHR\").node(\"inside the park home run\"),\n    bnb.text(\"LDP\").node(\"lined into double play\"),\n    bnb.text(\"LTP\").node(\"lined into triple play\"),\n    bnb.text(\"L\").node(\"line drive\"),\n    bnb.text(\"MREV\").node(\"manager challenge of call on the field\"),\n    bnb.text(\"NDP\").node(\"no double play credited for this play\"),\n    bnb.text(\"OBS\").node(\"obstruction (fielder obstructing a runner)\"),\n    bnb.text(\"PASS\").node(\"a runner passed another runner and was called out\"),\n    bnb.text(\"P\").node(\"pop fly\"),\n    bnb.text(\"RINT\").node(\"runner interference\"),\n    bnb\n      .text(\"R\")\n      .next(fielder)\n      .node(\"relay throw from the initial fielder to $ with no out made\"),\n    bnb.text(\"SF\").node(\"sacrifice fly\"),\n    bnb.text(\"SH\").node(\"sacrifice hit (bunt)\"),\n    bnb.text(\"TH\").next(base).node(\"throw to base %\"),\n    bnb.text(\"TH\").node(\"throw\"),\n    bnb.text(\"TP\").node(\"Triple play\"),\n    bnb.text(\"UINT\").node(\"umpire interference\"),\n    bnb.text(\"UREV\").node(\"umpire review of call on the field\")\n  )\n  .and(hitLocation.or(bnb.ok(null)))\n  .node(\"Modifier\");\nconst modifiers = bnb\n  .text(\"/\")\n  .next(modifier.sepBy(bnb.text(\"/\")))\n  .or(bnb.ok<ReturnType<typeof modifier[\"tryParse\"]>[]>([]));\n\nconst advancement = bnb\n  .choice(\n    bnb\n      .all(\n        base.skip(bnb.text(\"-\")),\n        base,\n        error.wrap(bnb.text(\"(\"), bnb.text(\")\")).or(bnb.ok(null))\n      )\n      .node(\"Successful Advancement\"),\n    bnb\n      .all(\n        base.skip(bnb.text(\"X\")),\n        base,\n        error.or(fielders).wrap(bnb.text(\"(\"), bnb.text(\")\")).or(bnb.ok(null))\n      )\n      .node(\"Failed Advancement\")\n  )\n  .node(\"Advancement\");\n\nconst play = bnb\n  .all(\n    basicPlay,\n    modifiers,\n    bnb\n      .text(\".\")\n      .next(advancement.sepBy(bnb.text(\";\")))\n      .or(bnb.ok<ReturnType<typeof advancement[\"tryParse\"]>[]>([]))\n  )\n  .node(\"Play\");\n\nexport type Play = ReturnType<typeof play[\"tryParse\"]>;\n\nexport type NodesIn<T> = T extends bnb.ParseNode<string, infer V>\n  ? NodesIn<V> | T\n  : T extends Array<infer Q>\n  ? NodesIn<Q>\n  : never;\n\ntype Modifier = ReturnType<typeof modifier[\"tryParse\"]>[\"value\"];\nexport type Modifiers = NodesIn<Modifier>;\nexport type BasicPlays = NodesIn<BasicPlay>;\nexport type Plays = NodesIn<Play>;\nexport type NodeNames = Plays[\"name\"];\n\nexport function parsePlay(\n  playString: string\n): (bnb.ParseFail & { source: string }) | bnb.ParseOK<Play> {\n  const ret = play.parse(playString);\n  if (ret.type === \"ParseFail\") {\n    return { ...ret, source: playString };\n  }\n  return ret;\n}\n\nexport function mustParsePlay(playString: string) {\n  return play.tryParse(playString);\n}\n\nexport function playIsScoring({ value }: Play): boolean {\n  const [{ value: play }, , advancements] = value;\n\n  return (\n    (play.name === \"Hit\" && play.value.name.includes(\"Home Run\")) ||\n    !!advancements.find(\n      (a) =>\n        a.value.name === \"Successful Advancement\" &&\n        (a.value.value[1].value === \"Home\" ||\n          (Array.isArray(a.value.value[1].value) &&\n            a.value.value[1].value[0] === \"Home\"))\n    )\n  );\n}\n","import * as CSV from \"@vanillaes/csv\";\nimport { Base, parsePlay, Play as ParsedPlay } from \"./parsePlay\";\nimport { POSITIONS } from \"./positions\";\n\nfunction last<T>(arg0: T[]): T | undefined {\n  return arg0.slice().pop();\n}\n\nexport type Logs = { games: Game[] };\n\nexport enum Team {\n  home = \"1\",\n  away = \"0\",\n}\nexport class Appearance {\n  constructor(\n    public playerID: string,\n    public name: string,\n    public team: \"0\" | \"1\",\n    public slot: number,\n    public appearanceNumber: number,\n    public pos: string\n  ) {}\n}\n\nexport type Play = {\n  inning: number;\n  battingTeam: Team;\n  batterID: string;\n  count: string;\n  pitches: string;\n  play: ReturnType<typeof parsePlay>;\n  batterHand?: string;\n  comments: string[];\n  substitutions: { from: Appearance; to: Appearance }[];\n  precedingState: GameState;\n};\nexport type Info = {\n  visteam: string;\n  hometeam: string;\n  site: string;\n  date: string;\n  number: string;\n  starttime: string;\n};\nexport type Game = {\n  id: string;\n  version: string;\n  info: Info;\n  starters: Appearance[];\n  events: Play[];\n  data: any[];\n  stats: any[];\n  comments: any[];\n  state: GameState;\n};\n\ntype PickFields<T, U> = {\n  [P in keyof T]: T[P] extends U ? T[P] : never;\n};\n\nexport class Statline {\n  positions: typeof POSITIONS[keyof typeof POSITIONS][] = [];\n  atBats = 0;\n  plateAppearances = 0;\n  hitByPitches = 0;\n  singles = 0;\n  doubles = 0;\n  triples = 0;\n  homeruns = 0;\n  hits = 0;\n  walks = 0;\n  strikeouts = 0;\n\n  record(\n    stat: keyof Omit<Statline, \"positions\" | \"record\">,\n    count: number = 1\n  ) {\n    this[stat] += count;\n    switch (stat) {\n      case \"plateAppearances\":\n      case \"hits\":\n        throw new Error(`do not record ${stat} directly`);\n\n      case \"atBats\":\n        break;\n\n      case \"singles\":\n      case \"doubles\":\n      case \"triples\":\n      case \"homeruns\":\n      case \"strikeouts\":\n        this.atBats += count;\n        break;\n\n      case \"walks\":\n      case \"hitByPitches\":\n        break;\n\n      default:\n        let _a: never = stat;\n        return _a;\n    }\n\n    this.hits = this.singles + this.doubles + this.triples + this.homeruns;\n    this.plateAppearances = this.atBats + this.walks + this.hitByPitches;\n  }\n}\n\ntype StatsKey = Pick<\n  Appearance,\n  \"playerID\" | \"slot\" | \"appearanceNumber\" | \"team\" | \"name\"\n>;\nclass Stats {\n  constructor(\n    // private teamTotals: Statline | null,\n    private stats: Record<string, [StatsKey, Statline]> = {}\n  ) {}\n\n  stat(app: Appearance): Statline {\n    const key = JSON.stringify({ ...app, pos: undefined });\n    const v = this.stats[key];\n    let statline = v && v[1];\n    if (!statline) {\n      statline = new Statline();\n      this.stats[key] = [app, statline];\n    }\n    const positions = statline.positions;\n    if (last(positions) !== app.pos) positions.push(app.pos);\n    return statline;\n  }\n\n  copy() {\n    return new Stats({ ...this.stats });\n  }\n\n  all() {\n    return Object.values(this.stats);\n  }\n}\n\nexport type GameState = {\n  players: Appearance[];\n  errors: any[];\n  gdp: any[];\n  stats: Stats;\n  inning: number;\n  battingTeam: Team;\n  outs: number;\n  pitching: Appearance;\n  bases: [null, Appearance | null, Appearance | null, Appearance | null];\n  batting: Appearance;\n  onDeck: Appearance;\n  inTheHole: Appearance;\n  nextUp: Record<Team, number>;\n  slotsAway: (arg0: Team, arg1: number) => number;\n  score: { home: number; away: number };\n};\n\nfunction isHome(base: Base): boolean {\n  if (typeof base.value === \"string\") {\n    return base.value === \"Home\";\n  }\n\n  return base.value[0] === \"Home\";\n}\n\nconst opponent = (t: Team) => {\n  return t === Team.home ? Team.away : Team.home;\n};\n\nexport function changedState(\n  state: Readonly<GameState>,\n  changes: (state: GameState) => GameState\n): GameState {\n  const newState: GameState = changes({\n    stats: state.stats.copy(),\n    bases: [null, state.bases[1], state.bases[2], state.bases[3]],\n    score: { ...state.score },\n    players: state.players.slice(),\n    errors: state.errors,\n    gdp: state.gdp,\n    inning: state.inning,\n    battingTeam: state.battingTeam,\n    outs: state.outs,\n    pitching: state.pitching,\n    batting: state.batting,\n    onDeck: state.onDeck,\n    inTheHole: state.inTheHole,\n    nextUp: { ...state.nextUp },\n    slotsAway: state.slotsAway,\n  });\n\n  if (newState.outs >= 3) {\n    if (state.battingTeam === Team.home) {\n      newState.inning += 1;\n    }\n    newState.battingTeam = opponent(state.battingTeam);\n    newState.bases = [null, null, null, null];\n\n    newState.outs = 0;\n  }\n  for (const app of newState.players) newState.stats.stat(app);\n\n  newState.pitching = newState.players.find(\n    (p) => p.pos === \"1\" && p.team === opponent(newState.battingTeam)\n  )!;\n  newState.batting = newState.players.find(\n    (p) =>\n      p.team === newState.battingTeam &&\n      p.slot === newState.slotsAway(newState.battingTeam, 0)\n  )!;\n  newState.onDeck = newState.players.find(\n    (p) =>\n      p.team === newState.battingTeam &&\n      p.slot === newState.slotsAway(newState.battingTeam, 1)\n  )!;\n  newState.inTheHole = newState.players.find(\n    (p) =>\n      p.team === newState.battingTeam &&\n      p.slot === newState.slotsAway(newState.battingTeam, 2)\n  )!;\n\n  return newState;\n}\n\nexport function makeInitialState(game: Game): GameState {\n  return changedState(\n    {\n      players: game.starters.slice(),\n      errors: [],\n      gdp: [],\n      stats: new Stats(),\n      inning: 1,\n      battingTeam: Team.away,\n      outs: 0,\n      pitching: undefined as any,\n      bases: [null, null, null, null],\n      batting: undefined as any,\n      onDeck: undefined as any,\n      inTheHole: undefined as any,\n      score: { home: 0, away: 0 },\n      nextUp: { \"0\": 1, \"1\": 1 },\n      slotsAway: function (team, slots) {\n        return ((this.nextUp[team] - 1 + slots) % 9) + 1;\n      },\n    },\n    (x) => x\n  );\n}\n\nexport function reduceState(\n  state: Readonly<GameState>,\n  play: ParsedPlay,\n  batterID: string\n): GameState {\n  const [{ value: basicPlay }, , advancements] = play.value;\n\n  if (state.batting.playerID !== batterID) {\n    // throw new Error(\n    //   `Expected ${JSON.stringify(\n    //     state.batting\n    //   )} to be up, instead it is ${batterID}`\n    // );\n  }\n\n  const newState = changedState(state, (x) => x);\n\n  const batterStats = state.stats.stat(state.batting);\n\n  const score = (count: number) => {\n    newState.score[state.battingTeam === Team.home ? \"home\" : \"away\"] += count;\n  };\n  const out = (count: number = 1) => {\n    newState.outs += count;\n  };\n  const advanceBatter = (times: number = 1) => {\n    newState.nextUp[newState.battingTeam] = newState.slotsAway(\n      newState.battingTeam,\n      times\n    );\n  };\n\n  switch (basicPlay.name) {\n    case \"Caught Stealing\":\n      out();\n      break;\n    case \"Out\":\n      out();\n      advanceBatter();\n      batterStats.record(\"atBats\");\n      break;\n    case \"Strikeout\":\n      out();\n      advanceBatter();\n      batterStats.record(\"strikeouts\");\n      console.log(\"Stikeout\", batterStats, newState.batting);\n      for (const baserunning of basicPlay.value) {\n        if ([\"Caught Stealing\", \"Pick Off\"].includes(baserunning.name)) {\n          newState.outs += 1;\n        }\n      }\n      for (const a of advancements) {\n        const [from] = a.value.value;\n        if (isHome(from)) {\n          newState.outs -= 1; // batter reached or catcher threw out at 1B\n        }\n      }\n      break;\n    case \"Walk\":\n    case \"Intentional Walk\":\n      batterStats.record(\"walks\");\n      for (const baserunning of basicPlay.value) {\n        if ([\"Caught Stealing\", \"Pick Off\"].includes(baserunning.name))\n          newState.outs += 1;\n      }\n      newState.bases[1] = state.batting;\n      advanceBatter();\n      break;\n    case \"Hit By Pitch\":\n      newState.bases[1] = state.batting;\n      advanceBatter();\n      break;\n    case \"Pick Off\": {\n      const [base, fielderOrError] = basicPlay.value;\n      if (fielderOrError && fielderOrError.name === \"Error\") {\n        const fromIdx = Number(base.value.slice(0, 1));\n        newState.bases[fromIdx] = null;\n      } else {\n        newState.outs += 1;\n      }\n      break;\n    }\n    case \"Double Play\":\n      newState.outs += 2;\n      advanceBatter();\n      break;\n    case \"Hit\":\n      advanceBatter();\n      const hit = basicPlay.value;\n      if ([\"Home Run\", \"Inside The Park Home Run\"].includes(hit.name)) {\n        score(1); // runners are scored via advancement?\n        batterStats.record(\"homeruns\");\n      } else if (hit.name === \"Single\") {\n        newState.bases[1] = state.batting;\n        batterStats.record(\"singles\");\n      } else if (hit.name === \"Double\") {\n        newState.bases[2] = state.batting;\n        batterStats.record(\"doubles\");\n      } else if (hit.name === \"Triple\") {\n        newState.bases[3] = state.batting;\n        batterStats.record(\"triples\");\n      }\n      break;\n\n    case \"Stolen Base\": {\n      const base = basicPlay.value;\n      break;\n    }\n\n    case \"Error\":\n    case \"Fielders Choice\":\n    case \"Interference\":\n      advanceBatter();\n      break;\n\n    case \"Balk\":\n    case \"No Play\":\n    case \"Error on foul fly ball\":\n    case \"Stolen Base\":\n    case \"Double Steal\":\n    case \"Defensive Indifference\":\n    case \"Passed Ball\":\n    case \"Wild Pitch\":\n      break;\n\n    default:\n      let _a: never = basicPlay;\n      return _a;\n  }\n\n  for (const advance_ of advancements) {\n    const advance = advance_.value;\n    const [from, to] = advance.value;\n\n    const fromIdx = Number(from.value.slice(0, 1));\n    const fromPlayer = isHome(from) ? state.batting : state.bases[fromIdx];\n    newState.bases[fromIdx] = null;\n\n    if (advance.name === \"Successful Advancement\") {\n      if (isHome(to)) {\n        score(1);\n      } else {\n        const toIdx = Number(to.value.slice(0, 1));\n        newState.bases[toIdx] = fromPlayer;\n      }\n    } else if (advance.name === \"Failed Advancement\") {\n      const [, { value: to }, fielderOrError] = advance.value;\n      newState.outs += 1;\n      if (\n        (fielderOrError && fielderOrError.name === \"Error\") ||\n        (Array.isArray(to) && to[1].length > 0)\n      )\n        newState.outs -= 1; // not actually an out?\n    }\n  }\n\n  return changedState(newState, (x) => x);\n}\n\nexport async function getLogs({\n  year,\n  team,\n}: {\n  year: string;\n  team: string;\n}): Promise<Logs> {\n  const response = await fetch(\n    // \"https://raw.githubusercontent.com/chadwickbureau/retrosheet/master/event/regular/2020NYA.EVA\",\n    `chadwickbureau-retrosheet/event/regular/${year}${team}.EVA`,\n    { method: \"GET\" }\n  );\n  const body = await response.text();\n\n  const logs: Logs = { games: [] };\n\n  const lines: Array<string[]> = CSV.parse(body);\n\n  let batHand = \" \";\n  let batHandBatter = \"\";\n\n  for (const line of lines) {\n    let currentGame: Game;\n    if (line[0] === \"id\") {\n      currentGame = {\n        info: {} as Info,\n        id: null as unknown as string,\n        version: null as unknown as string,\n        starters: [],\n        events: [],\n        data: [],\n        stats: [],\n        comments: [],\n        state: null as unknown as any,\n      };\n      logs.games.push(currentGame);\n    } else {\n      currentGame = logs.games.slice().pop()!;\n    }\n    const origLine = line.slice();\n    const tok = line.shift();\n\n    if (tok === \"id\" || tok === \"version\") {\n      (currentGame as any)[tok] = line.shift();\n    } else if (tok === \"info\") {\n      const k = line.shift();\n      const v = line.shift();\n      (currentGame.info as any)[k!] = v;\n    } else if (tok === \"start\" || tok === \"sub\") {\n      const playerID = line.shift()!;\n      const name = line.shift()!;\n      const team = line.shift()! as Team;\n      const slot = Number(line.shift()!);\n      const pos = line.shift()!;\n      const app: Appearance = {\n        playerID,\n        name,\n        team,\n        slot,\n        pos,\n        appearanceNumber: 0,\n      };\n      if (tok === \"start\") {\n        currentGame.starters.push(app);\n      } else if (tok === \"sub\") {\n        const idx = currentGame.state.players.findIndex(({ team, slot }) => {\n          return team === app.team && slot === app.slot;\n        });\n        if (idx === -1)\n          throw new Error(\n            `Missing player for substition ${JSON.stringify(\n              app\n            )} in ${JSON.stringify(currentGame.state.players)}`\n          );\n\n        const old = currentGame.state.players[idx];\n\n        currentGame.state = changedState(currentGame.state, (state) => {\n          state.players[idx] = {\n            ...app,\n            appearanceNumber:\n              old.playerID === app.playerID\n                ? old.appearanceNumber\n                : old.appearanceNumber + 1,\n          };\n          return state;\n        });\n\n        last(currentGame.events)!.substitutions.push({ from: old, to: app });\n      }\n    } else if (tok === \"play\") {\n      if (!currentGame.state) currentGame.state = makeInitialState(currentGame);\n      const inning = line.shift();\n      const battingTeam = line.shift() as Team;\n      const batterID = line.shift()!;\n      const count = line.shift()!.replace(/(\\d)(\\d)/, \"$1-$2\");\n      const pitches = line.shift()!;\n      const play = line.shift()!;\n\n      const parsedPlay = parsePlay(play);\n\n      currentGame.events.push({\n        inning: Number(inning),\n        battingTeam,\n        batterID,\n        count,\n        pitches,\n        play: parsedPlay,\n        comments: [],\n        substitutions: [],\n        precedingState: currentGame.state,\n      });\n\n      if (batHand !== \" \" && batHandBatter === batterID) {\n        last(currentGame.events)!.batterHand = batHand;\n      } else {\n        batHand = \" \";\n        batHandBatter = \" \";\n      }\n\n      if (parsedPlay.type === \"ParseOK\")\n        currentGame.state = reduceState(\n          currentGame.state,\n          parsedPlay.value,\n          batterID\n        );\n    } else if (tok === \"com\") {\n      // attach properly, then parse text\n      const lastPlay = last(currentGame.events);\n      if (lastPlay) {\n        lastPlay.comments.push(line.shift()!);\n      } else {\n        currentGame.comments.push({\n          text: line.shift(),\n        });\n      }\n    } else if (tok === \"stat\") {\n      last(currentGame.events)!.comments.push(\n        [\"Unhandled\", tok, ...line].join(\",\")\n      );\n    } else if (tok === \"event\") {\n      last(currentGame.events)!.comments.push(\n        [\"Unhandled\", tok, ...line].join(\",\")\n      );\n    } else if (tok === \"line\") {\n      last(currentGame.events)!.comments.push(\n        [\"Unhandled\", tok, ...line].join(\",\")\n      );\n    } else if (tok === \"badj\") {\n      last(currentGame.events)!.comments.push(\n        [\"Unhandled\", tok, ...line].join(\",\")\n      );\n    } else if (tok === \"padj\") {\n      last(currentGame.events)!.comments.push(\n        [\"Unhandled\", tok, ...line].join(\",\")\n      );\n    } else if (tok === \"ladj\") {\n      last(currentGame.events)!.comments.push(\n        [\"Unhandled\", tok, ...line].join(\",\")\n      );\n    } else if (tok === \"radj\") {\n      const playerID = line.shift()!;\n      const base = Number(line.shift()!);\n      currentGame.state = changedState(currentGame.state, (state) => {\n        state.bases[base] = state.players.find(\n          (pl) => pl.playerID === playerID\n        )!;\n        return state;\n      });\n    } else if (tok === \"data\") {\n      currentGame.data.push([...line]);\n      line.length = 0;\n    } else {\n      throw new Error(`Unhandled line type ${tok}`);\n    }\n\n    if (line.length > 0) {\n      throw new Error(`Remaining tokens ${line} in ${origLine} for ${tok}`);\n    }\n  }\n\n  return logs as Logs;\n}\n","import React from \"react\";\nimport { useLocation, BrowserRouter } from \"react-router-dom\";\nimport * as QueryString from \"query-string\";\nimport { Alert, Card, Table } from \"./Components\";\nimport * as CSV from \"@vanillaes/csv\";\nimport classnames from \"classnames\";\nimport { POSITIONS } from \"./positions\";\nimport { BasicPlays, Modifiers, playIsScoring, Plays } from \"./parsePlay\";\nimport { Game, Info, getLogs, Play, Logs, Team } from \"./parseGame\";\n\ntype Park = {\n  parkID: string;\n  name: string;\n  aka: string;\n  city: string;\n  state: string;\n  start: Date;\n  end: Date;\n  league: string;\n  notes: string;\n};\nasync function getParks(): Promise<Map<string, Park>> {\n  const response = await fetch(\n    // \"https://raw.githubusercontent.com/chadwickbureau/retrosheet/master/misc/parkcode.txt\",\n    \"chadwickbureau-retrosheet/misc/parkcode.txt\",\n    { method: \"GET\" }\n  );\n  const body = await response.text();\n  const parks = CSV.parse(body, { typed: true })\n    .slice(1)\n    .map(([parkID, name, aka, city, state, start, end, league, notes]) => ({\n      parkID,\n      name,\n      aka,\n      city,\n      state,\n      start,\n      end,\n      league,\n      notes,\n    }));\n\n  const ret = new Map<string, Park>();\n  for (const park of parks) {\n    ret.set(park.parkID, park);\n  }\n\n  return ret;\n}\n\ntype Person = {\n  retrosheetID: string;\n  name: string;\n};\nasync function getPeople(): Promise<Map<string, Person>> {\n  const response = await fetch(\n    // \"https://raw.githubusercontent.com/chadwickbureau/retrosheet/master/misc/parkcode.txt\",\n    \"./chadwickbureau-registry/people.csv\",\n    { method: \"GET\" }\n  );\n  const body = await response.text();\n  const people = CSV.parse(body, { typed: true })\n    .slice(1)\n    .map(\n      ([\n        key_person,\n        key_uuid,\n        key_mlbam,\n        key_retro,\n        key_bbref,\n        key_bbref_minors,\n        key_fangraphs,\n        key_npb,\n        key_sr_nfl,\n        key_sr_nba,\n        key_sr_nhl,\n        key_findagrave,\n        name_last,\n        name_first,\n        name_given,\n        name_suffix,\n        name_matrilineal,\n        name_nick,\n        birth_year,\n        birth_month,\n        birth_day,\n        death_year,\n        death_month,\n        death_day,\n        pro_played_first,\n        pro_played_last,\n        mlb_played_first,\n        mlb_played_last,\n        col_played_first,\n        col_played_last,\n        pro_managed_first,\n        pro_managed_last,\n        mlb_managed_first,\n        mlb_managed_last,\n        col_managed_first,\n        col_managed_last,\n        pro_umpired_first,\n        pro_umpired_last,\n        mlb_umpired_first,\n        mlb_umpired_last,\n      ]) => ({\n        retrosheetID: key_retro,\n        name_last,\n        name_first,\n        name_given,\n        name_suffix,\n        name_matrilineal,\n        name_nick,\n        name: `${name_first} ${name_last}`,\n      })\n    );\n\n  const ret = new Map<string, Person>();\n  for (const person of people) {\n    ret.set(person.retrosheetID, person);\n  }\n\n  return ret;\n}\n\nconst MetadataContext = React.createContext<{\n  parks: Map<string, Park>;\n  people: Map<string, Person>;\n}>({\n  parks: new Map(),\n  people: new Map(),\n});\n\nconst GameInfo = ({ info }: { info: Info }) => {\n  const parks = React.useContext(MetadataContext).parks;\n\n  const transformer: Record<string, (s: string) => string> = {\n    site: (s: string) => {\n      return parks.get(s)?.name || s;\n    },\n  };\n\n  return (\n    <div\n      className={classnames(\n        \"grid\",\n        \"items-stretch\",\n        \"justify-evenly\",\n        \"grid-cols-2\",\n        \"sm:grid-cols-3\",\n        \"lg:grid-cols-6\"\n      )}\n    >\n      {Object.entries(info).map(([k, v]) => (\n        <span\n          className=\"flex flex-col p-2 sm:p-3 lg:px-4 place-items-center\"\n          key={k}\n        >\n          <div className=\"text-sm font-semibold\">{k}</div>\n          <div className=\"text-lg\">{(transformer[k] || ((s) => s))(v)}</div>\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst StartingLineup = ({ game }: { game: Game }) => {\n  return (\n    <div\n      className=\"grid grid-flow-col-dense gap-2 content-center justify-items-stretch text-left items-baseline\"\n      style={{ gridTemplateColumns: \"3fr 1rem minmax(1rem, 1fr) 3fr 1rem\" }}\n    >\n      <div className=\"col-start-1 col-span-5 text-xl place-self-center\">\n        Starting Lineups\n      </div>\n      <div className=\"col-span-2  col-start-1 text-lg place-self-center\">\n        {game.info.hometeam}\n      </div>\n      <div className=\"col-span-1  col-start-3 justify-self-stretch\" />\n      <div className=\"col-span-2  col-start-4 text-lg place-self-center\">\n        {game.info.visteam}\n      </div>\n      {game.starters.map((s) => (\n        <div className={classnames(\"contents\")} key={s.playerID}>\n          <div\n            className={classnames({\n              \"col-start-1\": s.team === \"0\",\n              \"col-start-4\": s.team === \"1\",\n            })}\n          >\n            {s.name}\n          </div>\n          <div\n            className={classnames(\"place-self-end\", {\n              \"col-start-2\": s.team === \"0\",\n              \"col-start-5\": s.team === \"1\",\n            })}\n          >\n            {POSITIONS[s.pos] || s.pos}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\nconst BoxScore = ({ game }: { game: Game }) => {\n  const teams = [Team.away, Team.home];\n\n  const stats = teams.map((team) => {\n    const apps = game.state.stats.all().filter(([a]) => a.team === team);\n    apps.sort(([a], [b]) => {\n      let comp = a.slot - b.slot;\n      if (comp !== 0) {\n        if (b.slot === 0 || a.slot === 0) comp = -comp;\n        return comp;\n      }\n\n      comp = a.appearanceNumber - b.appearanceNumber;\n\n      return comp;\n    });\n    return apps;\n  });\n\n  return (\n    <div className=\"lg:flex justify-around\">\n      {teams.map((team, idx) => (\n        <Table.Table\n          data={stats[idx]}\n          key={team}\n          columns={[\n            {\n              header: game.info[team === Team.away ? \"visteam\" : \"hometeam\"],\n              // eslint-disable-next-line react/display-name\n              builder: ([app, stat]) => (\n                <span\n                  className={classnames({\n                    \"ml-2\": app.appearanceNumber !== 0,\n                  })}\n                >\n                  {app.name} {stat.positions.map((p) => POSITIONS[p]).join(\"-\")}{\" \"}\n                  {app.appearanceNumber}\n                </span>\n              ),\n            },\n            {\n              header: \"AB\",\n              // eslint-disable-next-line react/display-name\n              builder: ([app, stat]) => <span>{stat.atBats}</span>,\n            },\n            {\n              header: \"H\",\n              // eslint-disable-next-line react/display-name\n              builder: ([app, stat]) => <span>{stat.hits}</span>,\n            },\n            {\n              header: \"BB\",\n              // eslint-disable-next-line react/display-name\n              builder: ([app, stat]) => <span>{stat.walks}</span>,\n            },\n            {\n              header: \"SO\",\n              // eslint-disable-next-line react/display-name\n              builder: ([app, stat]) => <span>{stat.strikeouts}</span>,\n            },\n          ]}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst PlayNode = ({\n  node,\n}: {\n  node: Exclude<Plays, Modifiers> | BasicPlays;\n}): React.ReactElement => {\n  switch (node.name) {\n    case \"Modifier\": {\n      const [mod, hitLoc] = node.value;\n      return (\n        <>\n          {\" \"}\n          {mod.name}\n          {hitLoc && <> to {hitLoc.value.desc}</>}.\n        </>\n      );\n    }\n    case \"Basic Play\":\n      return (\n        <>\n          <PlayNode node={node.value} />.\n        </>\n      );\n    case \"Pick Off\":\n    case \"Caught Stealing\": {\n      const [base, fielders] = node.value;\n      return (\n        <>\n          {node.name} at <PlayNode node={base} />, <PlayNode node={fielders} />\n        </>\n      );\n    }\n    case \"Out\": {\n      const [fielders, base] = node.value;\n      return (\n        <>\n          {node.name}, <PlayNode node={fielders} />\n          {base && (\n            <>\n              {\" \"}\n              at <PlayNode node={base} />\n            </>\n          )}\n        </>\n      );\n    }\n\n    case \"Error\": {\n      const [assist, fielder, modifier] = node.value;\n      return (\n        <>\n          {node.name}, <PlayNode node={fielder} />\n          {assist && (\n            <>\n              ; assist by <PlayNode node={assist} />\n            </>\n          )}\n          {modifier && (\n            <>\n              {\" \"}\n              (<PlayNode node={modifier} />)\n            </>\n          )}\n        </>\n      );\n    }\n    case \"Fielders Choice\":\n      return (\n        <>\n          {node.name}\n          {node.value && (\n            <>\n              , <PlayNode node={node.value} />\n            </>\n          )}\n        </>\n      );\n    case \"Balk\":\n    case \"Defensive Indifference\":\n    case \"Ground Rule Double\":\n    case \"Hit By Pitch\":\n    case \"Home Run\":\n    case \"No Play\":\n    case \"Passed Ball\":\n    case \"Wild Pitch\":\n    case \"throwing\":\n    case \"Team Unearned Run\":\n    case \"Unearned Run\":\n    case \"RBI credited\":\n    case \"No RBI credited\":\n      return <>{node.name}</>;\n    case \"Strikeout\":\n    case \"Walk\":\n    case \"Intentional Walk\": {\n      const baserunning = node.value;\n      return (\n        <>\n          {node.name}\n          {baserunning.flatMap((br, idx) => [\n            <> (</>,\n            <PlayNode node={br} key={idx} />,\n            <>)</>,\n          ])}\n        </>\n      );\n    }\n    case \"Base\": {\n      if (Array.isArray(node.value)) {\n        const [name, modifiers] = node.value;\n        const m = modifiers\n          .flatMap((a, idx) => [<PlayNode node={a} key={idx} />, \", \"])\n          .slice(0, -1);\n        const p = m.length === 0 ? null : <> ({m})</>;\n        return (\n          <>\n            {name}\n            {p}\n          </>\n        );\n      }\n\n      return <>{node.value}</>;\n    }\n    case \"Fielder\":\n      return <>{node.value}</>;\n    case \"Hit\":\n      return <PlayNode node={node.value} />;\n    case \"Advancement\":\n      return (\n        <>\n          {\" \"}\n          <PlayNode node={node.value} />.\n        </>\n      );\n    case \"Single\":\n    case \"Double\":\n    case \"Triple\":\n    case \"Inside The Park Home Run\":\n      return (\n        <>\n          {node.name} to <PlayNode node={node.value} />\n        </>\n      );\n    case \"Fielders\":\n      return (\n        <span>\n          {node.value\n            .flatMap((f) => [<PlayNode node={f} key={f.value} />, <> to </>])\n            .slice(0, -1)}\n        </span>\n      );\n    case \"Play\":\n      return (\n        <span>\n          {node.value.map((n) =>\n            Array.isArray(n) ? (\n              n.map((n1, idx) => <PlayNode node={n1} key={n1.name + idx} />)\n            ) : (\n              <PlayNode node={n} key={n.name} />\n            )\n          )}\n        </span>\n      );\n    case \"Double Play\": {\n      const [f1, b, f2] = node.value;\n      return (\n        <>\n          {node.name}, <PlayNode node={f1} /> out at <PlayNode node={b} />\n          {f2 && (\n            <>\n              {\" \"}\n              by <PlayNode node={f2} />\n            </>\n          )}\n        </>\n      );\n    }\n    case \"Stolen Base\":\n      return (\n        <>\n          Stole <PlayNode node={node.value} />\n        </>\n      );\n    case \"Double Steal\":\n      return (\n        <>\n          {node.value\n            .flatMap((sb, idx) => [<PlayNode node={sb} key={idx} />, \" and \"])\n            .slice(0, -1)}\n        </>\n      );\n    case \"Successful Advancement\": {\n      const [from, to, error] = node.value;\n      return (\n        <>\n          Runner advanced from <PlayNode node={from} /> to{\" \"}\n          <PlayNode node={to} />\n          {error && (\n            <>\n              {\" \"}\n              (<PlayNode node={error} />)\n            </>\n          )}\n        </>\n      );\n    }\n    case \"Failed Advancement\": {\n      const [, { value: to }, fielderOrError] = node.value;\n      const notAnOut =\n        (fielderOrError && fielderOrError.name === \"Error\") ||\n        (Array.isArray(to) && to[1].length > 0);\n\n      return (\n        <>\n          Runner {notAnOut ? \"safe\" : \"out\"} advancing from{\" \"}\n          <PlayNode node={node.value[0]} /> to <PlayNode node={node.value[1]} />\n          {node.value[2] && (\n            <>\n              {\" \"}\n              (<PlayNode node={node.value[2]} />)\n            </>\n          )}\n        </>\n      );\n    }\n    case \"Interference\": {\n      const fielder = node.value;\n      return (\n        <>\n          <PlayNode node={fielder} /> interference\n        </>\n      );\n    }\n    case \"Error on foul fly ball\": {\n      const fielder = node.value;\n      return (\n        <>\n          {node.name} by <PlayNode node={fielder} />\n        </>\n      );\n    }\n\n    default:\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      let _a: never = node;\n      return _a;\n  }\n};\n\nconst PlayC = ({ play: parse }: { play: Play[\"play\"] }) => {\n  if (parse.type === \"ParseFail\") {\n    return (\n      <div>\n        Parsing failed\n        <pre>\n          {parse.source}\n          <br />\n          {\" \".repeat(parse.location.column - 1)}^\n        </pre>\n        Expected one of:\n        <ul className={classnames(\"list-disc\", \"list-inside\")}>\n          {parse.expected.map((e, idx) => (\n            <li key={idx}>\n              <pre className=\"inline\">{e}</pre>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  // const [basicPlay, modifiers, advancements] = parse.value.value;\n\n  // assert(basicPlay.name === \"Basic Play\");\n\n  // function isEmpty(arg0: { length: number } | null | any): boolean {\n  //   if (!arg0) return true;\n  //   if (Array.isArray(arg0) && arg0.length === 0) {\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  // const mf = modifiers.length > 0 && (\n  //   <>\n  //     Modifiers <pre>{JSON.stringify(modifiers, null, 2)}</pre>\n  //   </>\n  // );\n\n  // const af = advancements.length > 0 && (\n  //   <>\n  //     advancements <pre>{JSON.stringify(advancements, null, 2)}</pre>\n  //   </>\n  // );\n\n  // let v: React.ReactNode = null;\n\n  // if (!isEmpty(basicPlay.value.value)) {\n  //   if (typeof basicPlay.value.value === \"string\") {\n  //     v = basicPlay.value.value;\n  //   } else if (Array.isArray(basicPlay.value.value)) {\n  //     v = <pre>{JSON.stringify(basicPlay.value.value, null, 2)}</pre>;\n  //   } else if (\"name\" in basicPlay.value.value) {\n  //     v = <pre>{JSON.stringify(basicPlay.value.value, null, 2)}</pre>;\n  //   } else {\n  //     // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  //     let _a: never = basicPlay.value.value;\n  //   }\n  // }\n\n  const { value: play } = parse;\n\n  return (\n    <span className={classnames({ \"font-bold\": playIsScoring(play) })}>\n      <PlayNode node={play} />\n    </span>\n  );\n};\n\nconst PlayByPlay = ({ game }: { game: Game }) => {\n  const people = React.useContext(MetadataContext).people;\n  return (\n    <Table.Table\n      className={classnames(\"table\", \"table-auto\")}\n      data={game.events}\n      ifEmpty={<>Huh, a game with no events. How strange!</>}\n      row={(event) => {\n        return {\n          className: classnames(\n            \"table-row\",\n            \"border-b\",\n            \"border-gray-300\",\n            \"align-text-top\",\n            {\n              \"bg-gray-200\": event.battingTeam === Team.away,\n              \"font-bold\":\n                event.play.type === \"ParseOK\" &&\n                playIsScoring(event.play.value),\n              \"bg-red-200\": event.play.type === \"ParseFail\",\n            }\n          ),\n        };\n      }}\n      columns={[\n        {\n          header: \"Inning\",\n          // eslint-disable-next-line react/display-name\n          builder: (event) => (\n            <span\n              className={classnames({\n                \"bg-red-300\":\n                  event.battingTeam !== event.precedingState.battingTeam ||\n                  event.inning !== event.precedingState.inning,\n              })}\n            >\n              {(event.battingTeam !== event.precedingState.battingTeam ||\n                event.inning !== event.precedingState.inning) &&\n                \"XXXXX\"}\n              {event.battingTeam === \"0\" ? \"Top\" : \"Bottom\"} {event.inning}\n            </span>\n          ),\n        },\n        {\n          header: \"Outs\",\n          builder: (event) => event.precedingState.outs,\n        },\n        {\n          header: \"Score\",\n          // eslint-disable-next-line react/display-name\n          builder: (event) => (\n            <>\n              {event.precedingState.score.away} -{\" \"}\n              {event.precedingState.score.home}\n            </>\n          ),\n        },\n        {\n          header: \"Bases\",\n          builder: (event) =>\n            event.precedingState.bases\n              .slice(1)\n              .map((runner, idx) => (runner !== null ? idx + 1 : \"x\"))\n              .join(\"\"),\n        },\n        {\n          header: \"Pitching\",\n          builder: (event) => event.precedingState.pitching.name,\n        },\n        {\n          header: \"Batting\",\n          builder: (event) => {\n            const batting = event.precedingState.batting;\n            if (batting.playerID !== event.batterID) {\n              return `Expected ${JSON.stringify(\n                batting\n              )} to be up, instead it is ${event.batterID}`;\n            }\n            return batting.name;\n          },\n        },\n        {\n          header: \"Count\",\n          builder: (event) => event.count,\n        },\n        {\n          header: \"Play\",\n          // eslint-disable-next-line react/display-name\n          builder: (event) => (\n            <>\n              <PlayC play={event.play} />\n              {event.comments.map((c, idx) => (\n                <p key={idx}>{c}</p>\n              ))}\n              {event.substitutions.map(({ from, to }, idx) => (\n                <p key={idx}>\n                  {from.playerID === to.playerID && (\n                    <>\n                      {from.name} moved from {POSITIONS[from.pos]} to{\" \"}\n                      {POSITIONS[to.pos]}\n                    </>\n                  )}\n                  {from.playerID !== to.playerID && (\n                    <>\n                      {to.name} replaced {from.name},\n                      {to.slot !== 0 && ` batting ${to.slot} and`} playing{\" \"}\n                      {POSITIONS[to.pos]}\n                    </>\n                  )}\n                  .\n                </p>\n              ))}\n            </>\n          ),\n        },\n      ]}\n    />\n  );\n};\n\nconst GameC = ({ game }: { game: Game }) => {\n  return (\n    <>\n      <Card.Card>\n        <Card.Title>\n          <a\n            href={`https://www.retrosheet.org/boxesetc/${game.id.slice(\n              3,\n              7\n            )}/B${game.id.slice(7) + game.id.slice(0, 7)}.htm`}\n            target={game.id}\n          >\n            {game.info.visteam} ({game.state.score.away}) @ {game.info.hometeam}{\" \"}\n            ({game.state.score.home}) on {game.info.date}\n            {game.info.number !== \"0\" && ` (${game.info.number})`}\n          </a>\n        </Card.Title>\n        <Card.Body>\n          <Card.Actions />\n          <Card.Text>\n            <div\n              className={classnames(\"grid\", \"gap-6\")}\n              style={{ gridTemplateColumns: \"100%\" }}\n            >\n              <GameInfo info={game.info} />\n              {/* <StartingLineup game={game} /> */}\n              <BoxScore game={game} />\n              <PlayByPlay game={game} />\n            </div>\n          </Card.Text>\n        </Card.Body>\n      </Card.Card>\n    </>\n  );\n};\n\nconst LogsC = ({ logs }: { logs: Logs }) => {\n  return (\n    <>\n      <div className=\"flex flex-col\">\n        {logs.games.map((game) => (\n          <div className=\"mb-6 mx-4\" key={game.id}>\n            <GameC game={game} key={game.id} />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nfunction Body() {\n  const [logs, setLogs] = React.useState<Logs | null>(null);\n  const [parks, setParks] = React.useState<Map<string, Park> | null>(null);\n  const [people, setPeople] = React.useState<Map<string, Person> | null>(null);\n\n  const { search } = useLocation();\n\n  React.useEffect(() => {\n    const query = QueryString.parse(search);\n    const str = (name: string): string | null => {\n      const v = query[name];\n      return typeof v === \"string\" ? v : null;\n    };\n\n    getLogs({ year: str(\"year\") || \"2020\", team: str(\"team\") || \"NYA\" }).then(\n      (logs) => setLogs(logs)\n    );\n    // getParks().then((parks) => {\n    //   setParks(parks);\n    // });\n    // getPeople().then((people) => {\n    //   setPeople(people);\n    // });\n  }, [setLogs, setParks, setPeople, search]);\n\n  return (\n    <>\n      <Alert variant=\"error\">\n        <span className=\"md:hidden\">Welcome to BoxScored</span>\n        <span className=\"hidden md:inline\">\n          Welcome to BoxScored, a thing{\" \"}\n          <a\n            href=\"https://segiddins.me/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"underline\"\n          >\n            segiddins@\n          </a>{\" \"}\n          built.\n        </span>\n      </Alert>\n\n      <MetadataContext.Provider\n        value={{ parks: parks || new Map(), people: people || new Map() }}\n      >\n        {logs && <LogsC logs={logs} />}\n      </MetadataContext.Provider>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Body />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}